// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique // 사용자 고유 아이디
  password     String
  name         String
  role         Role     @default(MEMBER) // 역할 구분
  profileImage String?  // 프로필 이미지 (선택적)
  phoneNumber  String?  // 연락처 (선택적)
  createdAt    DateTime @default(now())

  // 관계
  member       Member?
  trainer      Trainer?
}

model Member {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  trainers     TrainerMember[] // 연결된 트레이너 목록
  schedules    Schedule[] // 관련된 스케줄 목록
}

model Trainer {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  members      TrainerMember[]  // 관리하는 회원 목록
  schedules    Schedule[] // PT 스케줄
}

model TrainerMember {
  id             Int      @id @default(autoincrement())
  memberId       Int
  trainerId      Int
  member         Member   @relation(fields: [memberId], references: [id])
  trainer        Trainer  @relation(fields: [trainerId], references: [id])

  // 추가 정보
  ptStartDate    DateTime // PT 시작일

  // 고유 제약조건
  @@unique([memberId, trainerId]) // 한 회원-트레이너 조합은 중복될 수 없음
}

model Schedule {
  id           Int      @id @default(autoincrement())
  date         DateTime // PT 날짜 및 시간
  location     String?  // PT 장소 (선택적)
  status       Status   @default(SCHEDULED) // 일정 상태
  trainingTarget String // 기본값 설정
  comment      String?
  exerciseDetails ExerciseDetail[]
  memberId     Int
  trainerId    Int
  member       Member   @relation(fields: [memberId], references: [id])
  trainer      Trainer  @relation(fields: [trainerId], references: [id])
}

model ExerciseDetail {
  id           Int       @id @default(autoincrement())
  scheduleId Int      // FitnessGoal과 연결
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  exerciseName  String    // 운동 이름 (예: 스쿼트, 데드리프트)
  reps          Int       // 반복 횟수
  sets          Int       // 세트 수
  weight        Float?    // 무게 (선택적, 예: kg)
  duration      Int?      // 운동 시간 (선택적, 예: 분)
}

enum Role {
  TRAINER
  MEMBER
}

enum Status {
  MEMBER_PROPOSED  // 멤버가 제안한 상태
  TRAINER_PROPOSED // 트레이너가 제안한 상태
  REJECTED         // 거절 상태
  SCHEDULED        // PT가 확정된 상태
  COMPLETED        // 완료된 상태
  CANCELED         // 취소된 상태
}