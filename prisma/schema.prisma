generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique // 사용자 고유 아이디
  gender       String // 성별 (예: "남", "여")
  age          Int // 나이
  password     String
  name         String
  role         Role     @default(MEMBER) // 역할 구분
  profileImage String? // 프로필 이미지 (선택적)
  phoneNumber  String? // 추가 연락처 (선택적)
  KakaoId      String? // 카카오 로그인 ID (선택적)
  createdAt    DateTime @default(now())

  member   Member?
  trainer  Trainer?
  messages Message[]
  devices  Device[]
}

// 기기 (복합 기본키 사용)
model Device {
  userId Int
  token  String // FCM 토큰
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, token])
}

// 메세지
model Message {
  id         Int      @id @default(autoincrement())
  userId     Int // 알림 수신자 ID (User와 관계)
  content    String // 알림 메시지 내용
  scheduleId Int? // 해당 메시지와 연관된 스케줄 ID (옵션)
  isRead     Boolean  @default(false) // 읽음 여부
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// 회원
model Member {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  user      User            @relation(fields: [userId], references: [id])
  trainers  TrainerMember[] // 연결된 트레이너 목록
  schedules Schedule[] // 관련된 스케줄 목록
}

// 트레이너
model Trainer {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  user      User            @relation(fields: [userId], references: [id])
  members   TrainerMember[] // 관리하는 회원 목록
  schedules Schedule[] // PT 스케줄
}

// 트레이너-회원 관계
model TrainerMember {
  memberId     Int
  trainerId    Int
  totalFee     Int // 총 수업료
  sessionCount Int // 수업 횟수
  expiryDate   DateTime // 만료 기간
  ptStartDate  DateTime // PT 시작일

  member  Member  @relation(fields: [memberId], references: [id])
  trainer Trainer @relation(fields: [trainerId], references: [id])

  @@unique([memberId, trainerId]) // 한 회원-트레이너 조합은 중복될 수 없음
}

// PT 스케줄
model Schedule {
  id              Int              @id @default(autoincrement())
  date            DateTime // PT 시작 날짜 및 시간
  endTime         DateTime // PT 종료 시간
  location        String? // PT 장소 (선택적)
  status          Status           @default(PROPOSED) // 일정 상태 (초기값은 PROPOSED)
  trainingTarget  String // 운동 목표 혹은 종목
  comment         String? // 추가 코멘트
  exerciseDetails ExerciseDetail[] // 관련 운동 기록
  memberId        Int
  trainerId       Int

  member  Member  @relation(fields: [memberId], references: [id])
  trainer Trainer @relation(fields: [trainerId], references: [id])
}

// 운동 상세
model ExerciseDetail {
  id           Int      @id @default(autoincrement())
  scheduleId   Int
  schedule     Schedule @relation(fields: [scheduleId], references: [id])
  exerciseName String // 운동 이름 (예: 스쿼트, 데드리프트)
  reps         Int // 반복 횟수
  sets         Int // 세트 수
  weight       Float? // 무게 (선택적, 예: kg)
  duration     Int? // 운동 시간 (선택적, 분 단위)
}

// 사용자 역할
enum Role {
  TRAINER
  MEMBER
}

// PT 스케줄 상태
enum Status {
  PROPOSED // 트레이너가 제안한 상태 (승인 대기)
  SCHEDULED // PT가 확정된 상태 (회원 승인 또는 시간 경과에 따른 자동 확정)
  MEMBER_CANCEL_PENDING // 회원이 취소 요청한 상태 (취소 대기)
  TRAINER_CANCELED_DEDUCTED // 확정 상태에서 트레이너가 취소한 상태 (차감)
  TRAINER_CANCELED_NON_DEDUCTED // 확정 상태에서 트레이너가 취소한 상태 (미차감)
  COMPLETED // 완료된 상태 (회원 승인 혹은 시간 경과에 따른 자동 완료)
  DISPUTED // 회원이 COMPLETED/CANCELED 상태에 대해 이의를 제기한 상태
}